---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/3 4:37 AM
---

require("eclass")

local unistd = require("posix.unistd")
local CasyncBase = require("async.asyncBase")

local CasyncPipeWrite = class("asyncPipeWrite", CasyncBase)

function CasyncPipeWrite:_init_(beaver, fd, tmo)
    self._toWake = coroutine.running()
    self._tmo = tmo
    CasyncBase._init_(self, beaver, fd, -1)
end

function CasyncPipeWrite:_setup(fd, tmo)
    local res, msg
    local co = self._toWake
    self._coSelf = coroutine.running()

    local beaver = self._beaver
    tmo = self._tmo
    while true do
        local stream = coroutine.yield()
        if type(stream) == "string" then
            beaver:co_set_tmo(fd, tmo)
            local ret, err, errno = beaver:pipeWrite(fd, stream)
            if coroutine.status(co) == "normal" then
                coroutine.yield(ret, err, errno)
            else
                print("write long done.")
                res, msg = coroutine.resume(co, ret, err, errno)
                assert(res, msg)
            end

            beaver:co_set_tmo(fd, -1)

            if not ret then -- fd close event?
                print(string.format("fd %d closed.", fd))
                break
            end
        else  -- fd close event?
            print(string.format("fd %d closed.", fd))
            break
        end
    end
    self:stop()
    unistd.close(fd)
end

function CasyncPipeWrite:write(stream)
    print("write ", #stream)
    local res, msg, err, errno = coroutine.resume(self._coSelf, stream)
    assert(res, msg)
    if msg then  -- wake from yield
        coroutine.resume(self._coSelf)
        return msg, err, errno
    else
        return coroutine.yield()
    end
end

return CasyncPipeWrite