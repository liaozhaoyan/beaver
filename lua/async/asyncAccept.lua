---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/1 11:04 PM
---

require("eclass")

local system = require("common.system")
local psocket = require("posix.sys.socket")
local CasyncBase = require("async.asyncBase")

local class = class
local CasyncAccept = class("asyncAccept", CasyncBase)

local liteAssert = system.liteAssert
local coReport = system.coReport
local running = coroutine.running
local yield = coroutine.yield
local resume = coroutine.resume
local assert = assert
local paccept = psocket.accept
local print = print

function CasyncAccept:_init_(beaver, fd, tmo)
    self._toWake = running()
    CasyncBase._init_(self, beaver, fd)  -- accept never overtime.
end

function CasyncAccept:_setup(fd, tmo)
    local co = self._toWake

    while true do
        local e = yield()
        if e.ev_close > 0 then
            print("bind closed.")
            break
        else
            local nfd, addr, errno = assert(paccept(fd))
            liteAssert(nfd, addr)
            local res, msg = resume(co, nfd, addr)
            coReport(co, res, msg)
        end
    end
    self:stop()
end

return CasyncAccept
