---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/1 11:04 PM
---

require("eclass")

local psocket = require("posix.sys.socket")
local unistd = require("posix.unistd")
local CasyncBase = require("async.asyncBase")

local CasyncAccept = class("asyncAccept", CasyncBase)

local function pingpong(arg, beaver, fd)
    local fread = beaver:read(fd, 1024)
    while true do
        local res = fread()
        if res == "Quit" then
            beaver:co_exit(fd)
            break
        end

        local stat = beaver:write(fd, res)
        if not stat then
            self:co_exit(fd)
        end
    end
    unistd.close(fd)
end

function CasyncAccept:_init_(beaver, fd, cb, arg)
    CasyncBase._init_(self, beaver, fd)  -- accept never overtime.
    self._cb = cb or pingpong
    self._arg = arg
end

function CasyncAccept:proc(fd, tmo)
    self._cb(self._arg, self._beaver, fd)
end

function CasyncAccept:_setup(fd, tmo)
    while true do
        local e = coroutine.yield()
        if e.ev_close > 0 then
            error("Prohibits actively closing a bound handle.")
        else
            local nfd = assert(psocket.accept(fd))
            self._beaver:co_add(nfd, self.proc, -1)
        end
    end
end

return CasyncAccept
