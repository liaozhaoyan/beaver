---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/14 11:09 PM
---

require("eclass")

local system = require("common.system")
local CasyncBase = require("async.asyncBase")
local cffi = require("beavercffi")
local c_type, c_api = cffi.type, cffi.api

local CasyncTimer = class("asyncTimer", CasyncBase)

function CasyncTimer:_init_(beaver, toWake)
    local fd = c_api.timer_io_init()
    assert(fd > 0, "setup timer io failed.")
    self._toWake = toWake

    CasyncBase._init_(self, beaver, fd, -1)
end

function CasyncTimer:_setup(fd, tmo)
    local res, msg
    local beaver = self._beaver
    local co = self._toWake

    beaver:co_set_tmo(fd, tmo)
    while true do
        local e = coroutine.yield()

        if e.ev_close > 0 then  -- should never occur.
            break
        end

        res = c_api.timer_io_get(fd)
        assert(res >= 0, "get timer_io value failed.")
        res, msg = coroutine.resume(co, 0)  -- to wake up masterTimer.
        system.coReport(co, res, msg)
    end
    self:stop()
    c_api.b_close(fd)
end

function CasyncTimer:update(ms)
    local res
    res = c_api.timer_io_set(self._fd, ms)
    assert(res >= 0, "set timer_io value failed " .. tonumber(ms))
end

function CasyncTimer:wait(ms)
    local res, msg
    local co = coroutine.running()

    res, msg = coroutine.resume(self._co, co, ms)
    system.coReport(self._co, res, msg)
    return coroutine.yield()
end

return CasyncTimer
