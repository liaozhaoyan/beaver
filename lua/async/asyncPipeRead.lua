---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/3 4:15 AM
---

require("eclass")

local system = require("common.system")
local CasyncBase = require("async.asyncBase")

local class = class
local CasyncPipeRead = class("asyncPipeRead", CasyncBase)

local print = print
local coReport = system.coReport
local running = coroutine.running
local yield = coroutine.yield
local resume = coroutine.resume

function CasyncPipeRead:_init_(beaver, fd, tmo)
    self._toWake = running()
    tmo = tmo or 10
    CasyncBase._init_(self, beaver, fd, tmo)
end

function CasyncPipeRead:_setup(fd, tmo)
    local res, msg
    local co = self._toWake

    yield()  -- wait to poll wake up.

    local beaver = self._beaver
    while true do
        local stream, err, errno = beaver:pipeRead(fd)
        res, msg = resume(co, stream, err, errno)
        coReport(co, res, msg)
        if not stream then
            print(string.format("pipe read fd %d closed.", fd))
            break
        end
    end
    self:stop()
end

function CasyncPipeRead:read()
    return yield()
end

return CasyncPipeRead