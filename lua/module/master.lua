---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/4 10:58 PM
---

require("eclass")
local unistd = require("posix.unistd")
local CcoBeaver = require("coBeaver")
local system = require("common.system")
local CasyncPipeRead = require("async.asyncPipeRead")
local CasyncPipeWrite = require("async.asyncPipeWrite")
local masterVar = require("module.masterVar")

local cffi = require("beavercffi")
local c_type, c_api = cffi.type, cffi.api

local lyaml = require("lyaml")
local cjson = require("cjson.safe")
local json = cjson.new()
json.encode_escape_forward_slash(false)

local Cmaster = class("master")

function Cmaster:_init_(conf)
    self._conf = conf
end

local function pipeOut(b, fOut)
    local w = CasyncPipeWrite.new(b, fOut, 10)

    while true do
        local stream = coroutine.yield()
        local res, err, errno = w:write(stream)
        assert(res, err)
    end
end

local function pipeIn(b, conf)
    local r = CasyncPipeRead.new(b, conf.fIn, -1)
    local coOut = coroutine.create(pipeOut)
    local res, msg = coroutine.resume(coOut, b, conf.fOut)
    assert(res, msg)
    masterVar.masterSetPipeOut(coOut)

    while true do
        local s = r:read()
        local arg = json.decode(s)
        masterVar.call(arg)
    end
end

local function check(last, hope)
    local now = os.time()
    assert(now - last == hope, "check var failed.")
    return now
end

local function testTimer()
    local last = os.time()
    while true do
        masterVar.msleep(1000)
        last = check(last, 1)
        print("test for timer1.")
        masterVar.msleep(2000)
        last = check(last, 2)
        print("test for timer2.")
    end
end

function Cmaster:proc()
    local b = CcoBeaver.new()

    masterVar.masterSetVar(b, self._conf, lyaml.load(self._conf.config))

    local co = coroutine.create(pipeIn)
    local res, msg = coroutine.resume(co, b, self._conf)
    assert(res, msg)

    co = coroutine.create(testTimer)
    res, msg = coroutine.resume(co)
    assert(res, msg)

    b:poll()
    return 0
end

return Cmaster

