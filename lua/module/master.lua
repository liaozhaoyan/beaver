---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/4 10:58 PM
---

local require = require
require("eclass")
local unistd = require("posix.unistd")
local CcoBeaver = require("coBeaver")
local system = require("common.system")
local CasyncPipeRead = require("async.asyncPipeRead")
local CasyncPipeWrite = require("async.asyncPipeWrite")
local masterVar = require("module.masterVar")

local lyaml = require("lyaml")
local cjson = require("cjson.safe")
local buffer = require("string.buffer")
local log = require("common.log")

local class = class
local Cmaster = class("master")

local print = print
local time = os.time
local exit = os.exit
local liteAssert = system.liteAssert
local coReport = system.coReport
local create = coroutine.create
local yield = coroutine.yield
local resume = coroutine.resume
local format = string.format
local pipeDecode = buffer.decode
local yload = lyaml.load
local mcall = masterVar.call

cjson.encode_empty_table_as_object(false)
cjson.encode_escape_forward_slash(false)

function Cmaster:_init_(conf)
    self._conf = conf
end

local function pipeOut(beaver, fOut)
    local w = CasyncPipeWrite.new(beaver, fOut, 10)

    while true do
        local stream = yield()
        w:write(stream)
    end
end

local function pipeIn(b, conf)  --> to receive call function
    local r = CasyncPipeRead.new(b, conf.fIn, -1)

    local coOut = create(pipeOut)
    local res, msg = resume(coOut, b, conf.fOut)
    coReport(coOut, res, msg)
    masterVar.masterSetPipeOut(coOut)

    while true do
        local s = r:read()
        local arg = pipeDecode(s)
        if arg then
            mcall(arg)
        else
            print(format("decode arg failed. %d, %s", #arg, s))
            exit(1)
        end
    end
end


function Cmaster:proc()
    local config = yload(self._conf.config)
    if not config.log then
        config.log = {level = 3, pattern = "%l %t: %m"}
    end
    config.log.level = config.log.level or 3
    config.log.pattern = config.log.pattern or "%l %t: %m"
    log._init(true,
        config.log.level,
        config.log.pattern,
        config.log.out or "bv_run.log",
        config.log.maxLogSize or 10,
        config.log.rotate or 4)

    log.info("master start.")

    local beaver = CcoBeaver.new()
    masterVar.masterSetVar(beaver, self._conf, config)

    local co = create(pipeIn)
    local res, msg = resume(co, beaver, self._conf)
    coReport(co, res, msg)

    beaver:poll()
    print("Unexpected exit from the epoll loop for master.")  -- master should not exit.
    exit(1)
    return 0
end

return Cmaster
