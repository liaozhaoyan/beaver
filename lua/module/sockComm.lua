---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/7 11:11 AM
---
local unistd = require("posix.unistd")
local psocket = require("posix.sys.socket")
local CasyncAccept = require("async.asyncAccept")
local workVar = require("module.workVar")

local M = {}

function M.setupSocket(conf)
    local res, fd, err, errno
    if conf.port then
        fd, err, errno = psocket.socket(psocket.AF_INET, psocket.SOCK_STREAM, 0)
        assert(fd, err)
        local tPort = {family=psocket.AF_INET, addr=conf.bind, port=conf.port}
        res, err, errno = psocket.bind(fd, tPort)
        assert(res, err)
    elseif conf.uni_sock then
        unistd.unlink(conf.uni_sock)
        fd, err, errno = psocket.socket(psocket.AF_UNIX, psocket.SOCK_STREAM, 0)
        assert(fd, err)
        local tPort = {family=psocket.AF_UNIX, path=conf.uni_sock}
        res, err, errno = psocket.bind(fd, tPort)
        assert(res, err)
    end
    local backlog = conf.backlog or 10
    res, err, errno = psocket.listen(fd, backlog)
    assert(res, err)
    return fd
end

local function acceptServer(obj, func, beaver, bfd)
    workVar.bindAdd(func, bfd, coroutine.running())
    CasyncAccept.new(beaver, bfd, -1)
    while true do
        local nfd, addr = coroutine.yield()
        obj.new(beaver, nfd, bfd, addr, func)
    end
end

function M.acceptSetup(obj, beaver, conf)
    assert(conf.mode == "TCP", "bad pingpong mode: " .. conf.mode)
    local fd = M.setupSocket(conf)
    local co = coroutine.create(acceptServer)
    local res, msg = coroutine.resume(co, obj, conf.func, beaver, fd)
    assert(res, msg)
end

return M