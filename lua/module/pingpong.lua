---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/5 1:43 PM
---

require("eclass")
local unistd = require("posix.unistd")
local psocket = require("posix.sys.socket") 
local system = require("common.system")
local CasyncBase = require("async.asyncBase")
local CasyncAccept = require("async.asyncAccept")
local workVar = require("module.workVar")


local Cpingpong = class("pinngpong")

local function setupSocket(conf)
    local res, fd, err, errno
    if conf.port then
        fd, err, errno = psocket.socket(psocket.AF_INET, psocket.SOCK_STREAM, 0)
        assert(fd, err)
        local tPort = {family=psocket.AF_INET, addr=conf.bind, port=conf.port}
        res, err, errno = psocket.bind(fd, tPort)
        assert(res, err)
    elseif conf.uni_sock then
        unistd.unlink(conf.uni_sock)
        fd, err, errno = psocket.socket(psocket.AF_UNIX, psocket.SOCK_STREAM, 0)
        assert(fd, err)
        local tPort = {family=psocket.AF_UNIX, path=conf.uni_sock}
        res, err, errno = psocket.bind(fd, tPort)
        assert(res, err)
    end
    local backlog = conf.backlog or 10
    res, err, errno = psocket.listen(fd, backlog)
    assert(res, err)
    return fd
end

local CasyncProc = class("asyncProc", CasyncBase)

function CasyncProc:_init_(beaver, fd, bfd, addr, tmo)
    self._beaver = beaver
    tmo = tmo or 10
    self._bfd = bfd
    self._addr = addr
    CasyncBase._init_(self, beaver, fd, tmo)
end

function CasyncProc:_setup(fd, tmo)
    local beaver = self._beaver
    workVar.pingpongAdd(self._bfd, fd, coroutine.running(), self._addr)
    while true do
        beaver:co_set_tmo(fd, -1)
        local s = beaver:read(fd)
        if not s then
            break
        end
        beaver:co_set_tmo(fd, tmo)
        local res = beaver:write(fd, s)
        if not res then
            break
        end
    end
    self:stop()
    unistd.close(fd)
    workVar.pingpongDel(fd)
end


local function acceptServer(beaver, fd)
    workVar.pingpongBindAdd(fd, coroutine.running())
    CasyncAccept.new(beaver, fd, -1)
    while true do
        local nfd, addr = coroutine.yield()
        CasyncProc.new(beaver, nfd, fd)
    end
end

function Cpingpong:_init_(beaver, conf, stat)
    assert(conf.mode == "TCP", "bad pingpong mode: " .. conf.mode)
    local fd = setupSocket(conf)
    local co = coroutine.create(acceptServer)
    local res, msg = coroutine.resume(co, beaver, fd)
    assert(res, msg)
end

return Cpingpong