---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/5 12:51 AM
---

local require = require
require("eclass")
local unistd = require("posix.unistd")
local CcoBeaver = require("coBeaver")
local system = require("common.system")
local CasyncPipeRead = require("async.asyncPipeRead")
local CasyncPipeWrite = require("async.asyncPipeWrite")
local workVar = require("module.workVar")

local lyaml = require("lyaml")
local cjson = require("cjson.safe")
local buffer = require("string.buffer")

local class = class
local Cworker = class("master")

local pairs = pairs
local format = string.format
local liteAssert = system.liteAssert
local coReport = system.coReport
local create = coroutine.create
local running = coroutine.running
local yield = coroutine.yield
local resume = coroutine.resume
local pipeDecode = buffer.decode
local yload = lyaml.load
local wcall = workVar.call

cjson.encode_empty_table_as_object(false)
cjson.encode_escape_forward_slash(false)

function Cworker:_init_(conf)
    self._conf = conf
end

local function pipeOut(b, fOut)
    local w = CasyncPipeWrite.new(b, fOut, 10)

    while true do
        local stream = yield()
        w:write(stream)
    end
end

local function pipeIn(b, conf)
    local r = CasyncPipeRead.new(b, conf.fIn, -1)

    local coOut = create(pipeOut)
    local res, msg = resume(coOut, b, conf.fOut)
    coReport(coOut, res, msg)
    workVar.workerSetPipeOut(coOut)

    while true do
        local s = r:read()
        wcall(pipeDecode(s))
    end
end

local function setupFuncs(thread)
    local beaver = thread.beaver
    local funcs = thread.yaml.worker.funcs
    if funcs then
        for _, cell in pairs(thread.yaml.worker.funcs) do
            local module = require(format("worker.%s", cell.func))
            local bindAdd = workVar.bindAdd
            workVar.acceptSetup(module, beaver, cell, bindAdd)
        end
    end
    local entries = thread.yaml.worker.entries
    if entries then
        for _, cell in pairs(entries) do
            local module = require(format("app.%s", cell.entry))
            local co = create(module.call)
            local res, msg = resume(co, beaver, cell)
            coReport(co, res, msg)
        end
    end
end

function Cworker:proc()
    local b = CcoBeaver.new()

    b.var = workVar
    workVar.workerSetVar(b, self._conf, yload(self._conf.config))
    workVar.setCb(setupFuncs, workVar.workerGetVar())

    local co = create(pipeIn)
    local res, msg = resume(co, b, self._conf)
    coReport(co, res, msg)
    b:poll()
    return 0
end

return Cworker
