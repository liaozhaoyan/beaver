---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/5 12:51 AM
---

require("eclass")
local unistd = require("posix.unistd")
local CcoBeaver = require("coBeaver")
local system = require("common.system")
local CasyncPipeRead = require("async.asyncPipeRead")
local CasyncPipeWrite = require("async.asyncPipeWrite")

local lyaml = require("lyaml")
local cjson = require("cjson.safe")
local json = cjson.new()
json.encode_escape_forward_slash(false)

local Cworker = class("master")

function Cworker:_init_(conf)
    self._conf = conf
end

local function pipe_out(b, f_out)
    local w = CasyncPipeWrite.new(b, f_out, 10)

    while true do
        local stream = coroutine.yield()
        local res, err = w:write(stream)
        assert(res, err)
    end
end

local workVar = {}

local function reg_thread_id(arg)
    workVar.id = arg.id
    local func = {
        func = "worker_reg",
        arg = {
            id = arg.id
        }
    }

    local res, msg = coroutine.resume(workVar.coOut, json.encode(func))
    assert(res, msg)
end

local func_table = {
    reg_thread_id = function(arg) return reg_thread_id(arg)  end
}

local function pipe_in(b, conf)
    local r = CasyncPipeRead.new(b, conf.f_in, -1)

    local coOut = coroutine.create(pipe_out)
    local res, msg = coroutine.resume(coOut, b, conf.f_out)
    assert(res, msg)
    workVar.coOut = coOut

    while true do
        local s = r:read()
        local arg = json.decode(s)
        func_table[arg.func](arg.arg)
    end
end

local function setupFuncs(var, b)
    for _, cell in pairs(var.yaml.worker.funcs) do
        local module = require("module." .. cell.func)
        module.new(b, cell)
    end
end

function Cworker:proc()
    local b = CcoBeaver.new()

    workVar.beaver = b
    workVar.conf = self._conf
    workVar.yaml = lyaml.load(workVar.conf.config)

    setupFuncs(workVar, b)

    local co = coroutine.create(pipe_in)
    local res, msg = coroutine.resume(co, b, self._conf)
    assert(res, msg)
    b:poll()
    return 0
end

return Cworker
