---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2024/1/5 12:51 AM
---

require("eclass")
local unistd = require("posix.unistd")
local CcoBeaver = require("coBeaver")
local system = require("common.system")
local CasyncPipeRead = require("async.asyncPipeRead")
local CasyncPipeWrite = require("async.asyncPipeWrite")
local workVar = require("module.workVar")
local sockComm = require("module.sockComm")

local lyaml = require("lyaml")
local cjson = require("cjson.safe")
local json = cjson.new()
json.encode_escape_forward_slash(false)

local Cworker = class("master")

function Cworker:_init_(conf)
    self._conf = conf
end

local function pipeOut(b, fOut)
    local w = CasyncPipeWrite.new(b, fOut, 10)

    while true do
        local stream = coroutine.yield()
        local res, err = w:write(stream)
        assert(res, err)
    end
end

local function pipeIn(b, conf)
    local r = CasyncPipeRead.new(b, conf.fIn, -1)

    local coOut = coroutine.create(pipeOut)
    local res, msg = coroutine.resume(coOut, b, conf.fOut)
    assert(res, msg)
    workVar.workerSetPipeOut(coOut)

    while true do
        local s = r:read()
        local arg = json.decode(s)
        workVar.call(arg)
    end
end

local function setupFuncs(thread, b)
    for _, cell in pairs(thread.yaml.worker.funcs) do
        local module = require("module." .. cell.func)
        sockComm.acceptSetup(module, b, cell)
    end
end

function Cworker:proc()
    local b = CcoBeaver.new()

    workVar.workerSetVar(b, self._conf, lyaml.load(self._conf.config))
    setupFuncs(workVar.workerGetVar(), b)

    local co = coroutine.create(pipeIn)
    local res, msg = coroutine.resume(co, b, self._conf)
    assert(res, msg)
    b:poll()
    return 0
end

return Cworker
