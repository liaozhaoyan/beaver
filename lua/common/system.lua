---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/16 10:58 PM
---
local require = require
local serpent = require("common.serpent")
local block = serpent.block
local unistd = require("posix.unistd")
local system = {}
local type = type
local print = print
local pairs = pairs
local ipairs = ipairs
local xpcall = xpcall
local assert = assert
local setmetatable = setmetatable
local getmetatable = getmetatable
local error = error
local traceback = debug.traceback
local concat = table.concat
local sub = string.sub
local gsub = string.gsub
local format = string.format
local byte = string.byte
local rep = string.rep

function system.deepcopy(object)
    local lookup_table = {}
    local function _copy(obj)
        if type(obj) ~= "table" then
            return obj
        elseif lookup_table[obj] then
            return lookup_table[obj]
        end
        local new_table = {}
        lookup_table[obj] = new_table
        for index, value in pairs(obj) do
            new_table[_copy(index)] = _copy(value)
        end
        return setmetatable(new_table, getmetatable(obj))
    end

    return _copy(object)
end

function system.dump(t)
    return block(t)
end

function system.dumps(t)
    print(block(t))
end

local function _coReport(co, msg)
    local cells = {
        --"coroutine run failed, err message is:",
        msg or "resume dead thread",
        "\ncallback list:",
        traceback(co)
    }
    return concat(cells, "\n")
end

function system.liteAssert(cond, ...)
    if not cond then
        error(format(...))
    end
end

function system.coReport(co, res, msg)
    return system.liteAssert(res, res or _coReport(co, msg))  -- if res true, the 2nd var will return
end

local lastStack = ""
local function funcReport(err)
    lastStack = err .. traceback()
    print("call error: ", lastStack)
end

function system.pcall(func, ...)
    return xpcall(func, funcReport, ...)
end

function system.lastError()
    return lastStack
end

function system.reverseTable(t)
    local n = #t
    for i = 1, n / 2 do
        t[i], t[n + 1 - i] = t[n + 1 - i], t[i]
    end
end

function system.keyIsIn(tbl, key)
    if type(tbl) ~= "table" then
        return false
    end
    if tbl[key] == nil then
        return false
    else
        return true
    end
end

function system.valueIsIn(tbl, value)
    if type(tbl) ~= "table" then
        return false
    end
    for _, v in pairs(tbl) do
        if v == value then
            return true
        end
    end
    return false
end

function system.valueIndex(tbl, value)
    if type(tbl) ~= "table" then
        return 0
    end
    for i, v in ipairs(tbl) do
        if v == value then
            return i
        end
    end
    return 0
end

function system.keyCount(tbl)
    local count = 0
    for _, _ in pairs(tbl) do
        count = count + 1
    end
    return count
end

function system.dictCopy(tbl)
    local cp = {}
    assert(type(tbl) == "table")

    for k, v in pairs(tbl) do
        cp[k] = v
    end
    return cp
end

function system.listMerge(...)
    local res = {}
    local i = 1
    for _, vt in ipairs{...} do
        if type(vt) == "table" then
            for _, v in ipairs(vt) do
                res[i] = v
                i = i + 1
            end
        end
    end
    return res
end

function system.hex2ups(hex)
    return (gsub(hex, ".", function (c)
        return format("%02X", byte(c))
    end))
end

function system.hex2lows(hex)
    return (gsub(hex, ".", function (c)
        return format("%02x", byte(c))
    end))
end

local io_write = io.write
function system.hexdump(buf)
    for Byte=1, #buf, 16 do
        local chunk = buf:sub(Byte, Byte+15)
        io_write(format('%08X  ',Byte-1))
        chunk:gsub('.', function (c) io_write(format('%02X ',byte(c))) end)
        io_write(rep(' ',3*(16-#chunk)))
        io_write(' ',chunk:gsub('%c','.'),"\n")
    end
end

local htmlRep  = {
    ["<"] = function() return "&lt;" end,
    [">"] = function() return "&gt;" end,
    ["&"] = function() return "&amp;" end,
    ['"'] = function() return "&quot;" end,
    ["\t"] = function() return "&emsp;" end,
}

local function esc_html(s)
    return htmlRep[s]()
end

function system.escHtml(s)
    local reHtml = '[<>&"\t]'
    return gsub(s, reHtml, function(s) return esc_html(s)  end)
end

local function esc_md(s)
    return "\\" .. s
end

function system.escMd(s)
    local reFmt = "[\\`%*_%{%}%[%]%(%)#%+%-%.!|]"
    return gsub(s, reFmt, function(s) return esc_md(s)  end)
end

local time = os.time
local date = os.date
function system.timeRfc1123(t)
    t = t or time()
    return date("!%a, %d %b %Y %H:%M:%S GMT", t)
end

local lyaml = require("lyaml")
local io_open = io.open
function system.parseYaml(fYaml)
    local f = io_open(fYaml,"r")
    if not f then
        error(format("file: %s is not exist.", fYaml))
    end
    local s = f:read("*all")
    f:close()
    return lyaml.load(s)
end

local randomseed = math.randomseed
local random = math.random
randomseed(time()+unistd.getpid())
function system.guid()
    local seed={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}
    local tb={}
    for i = 1,32 do
        tb[i] = seed[random(1,16)]
    end

    local sid = concat(tb)
    return format('%s-%s-%s-%s-%s',
            sub(sid,1,8),
            sub(sid,9,12),
            sub(sid,13,16),
            sub(sid,17,20),
            sub(sid,21,32)
    )
end

function system.randomStr(n)
    local t = {
        "0","1","2","3","4","5","6","7","8","9",
        "a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",
        "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z",
    }
    local tSize = #t
    local s = {}
    for i = 1, n do
        s[i] = t[random(tSize)]
    end
    return concat(s)
end

return system