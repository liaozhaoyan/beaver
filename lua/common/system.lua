---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/16 10:58 PM
---

local serpent = require("common.serpent")
local system = {}

function system:deepcopy(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end
        local new_table = {}
        lookup_table[object] = new_table
        for index, value in pairs(object) do
            new_table[_copy(index)] = _copy(value)
        end
        return setmetatable(new_table, getmetatable(object))
    end

    return _copy(object)
end

function system:dump(t)
    return serpent.block(t)
end

function system:dumps(t)
    print(serpent.block(t))
end

function system:reverseTable(t)
    local n = #t
    for i = 1, n / 2 do
        t[i], t[n + 1 - i] = t[n + 1 - i], t[i]
    end
end

function system:keyIsIn(tbl, key)
    if type(tbl) ~= "table" then
        return false
    end
    if tbl[key] == nil then
        return false
    else
        return true
    end
end

function system:valueIsIn(tbl, value)
    if type(tbl) ~= "table" then
        return false
    end
    for _, v in pairs(tbl) do
        if v == value then
            return true
        end
    end
    return false
end

function system:valueIndex(tbl, value)
    if type(tbl) ~= "table" then
        return 0
    end
    for i, v in ipairs(tbl) do
        if v == value then
            return i
        end
    end
    return 0
end

function system:keyCount(tbl)
    local count = 0
    for _, _ in pairs(tbl) do
        count = count + 1
    end
    return count
end

function system:dictCopy(tbl)
    local cp = {}
    assert(type(tbl) == "table")

    for k, v in pairs(tbl) do
        cp[k] = v
    end
    return cp
end

function system:listMerge(...)
    local res = {}
    local i = 1
    for _, vt in ipairs{...} do
        if type(vt) == "table" then
            for _, v in ipairs(vt) do
                res[i] = v
                i = i + 1
            end
        end
    end
    return res
end

function system:hex2ups(hex)
    return (string.gsub(hex, ".", function (c)
        return string.format("%02X", string.byte(c))
    end))
end

function system:hex2lows(hex)
    return (string.gsub(hex, ".", function (c)
        return string.format("%02x", string.byte(c))
    end))
end

function system:hexdump(buf)
    for byte=1, #buf, 16 do
        local chunk = buf:sub(byte, byte+15)
        io.write(string.format('%08X  ',byte-1))
        chunk:gsub('.', function (c) io.write(string.format('%02X ',string.byte(c))) end)
        io.write(string.rep(' ',3*(16-#chunk)))
        io.write(' ',chunk:gsub('%c','.'),"\n")
    end
end

local htmlRep  = {
    ["<"] = function() return "&lt;" end,
    [">"] = function() return "&gt;" end,
    ["&"] = function() return "&amp;" end,
    ['"'] = function() return "&quot;" end,
    ["\t"] = function() return "&emsp;" end,
}

local function esc_html(s)
    return htmlRep[s]()
end

function system:escHtml(s)
    local reHtml = '[<>&"\t]'
    return string.gsub(s, reHtml, function(s) return esc_html(s)  end)
end

local function esc_md(s)
    return "\\" .. s
end

function system:escMd(s)
    local reFmt = "[\\`%*_%{%}%[%]%(%)#%+%-%.!|]"
    return string.gsub(s, reFmt, function(s) return esc_md(s)  end)
end

function system:timeRfc1123(t)
    t = t or os.time()
    return os.date("!%a, %d %b %Y %H:%M:%S GMT", t)
end

function system:parseYaml(fYaml)
    local lyaml = require("lyaml")
    local f = io.open(fYaml,"r")
    if not f then
        error("file: " .. fYaml .. " is not exist.")
    end
    local s = f:read("*all")
    f:close()

    return lyaml.load(s)
end

function system:guid()
    math.randomseed(os.time())
    local seed={'e','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}
    local tb={}
    for i = 1,32 do
        table.insert(tb,seed[math.random(1,16)])
    end

    local sid = table.concat(tb)
    return string.format('%s-%s-%s-%s-%s',
            string.sub(sid,1,8),
            string.sub(sid,9,12),
            string.sub(sid,13,16),
            string.sub(sid,17,20),
            string.sub(sid,21,32)
    )
end

function system:randomStr(n)
    local t = {
        "0","1","2","3","4","5","6","7","8","9",
        "a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",
        "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z",
    }
    local tSize = #t
    local s = {}
    for i = 1, n do
        s[i] = t[math.random(tSize)]
    end
    return table.concat(s)
end

return system